version: "3"

services:
  sme-public-profile-client:
    image: "${CLIENT_IMAGE}"
    environment:
      PUBLIC_VAR_CLIENT_ENV: "${CLIENT_ENV}"
      PUBLIC_VAR_GOOGLE_ANALYTICS_ID: "${CLIENT_GOOGLE_ANALYTICS_ID}"
      NODE_ENV: production
    ports:
      - target: 3000
        x-aws-protocol: http
    deploy:
      replicas: ${REQUIRED_INSTANCES}

  sector-average-service:
    image: "${SECTOR_AVERAGE_SERVICE_IMAGE}"
    environment:
      NODE_ENV: production
      STAGE: "${STAGE}"
      NO_COLOR: "y"
      ALLOW_CORS_ANY_ORIGIN: "${BACKENDS_ALLOW_CORS_ANY_ORIGIN}"
    ports:
      - target: 3003
        x-aws-protocol: http
    secrets:
      - sector-average-service
    deploy:
      replicas: ${REQUIRED_INSTANCES}

secrets:
  sector-average-service:
    name: "${SECTOR_AVERAGE_SERVICE_SECRET}"
    external: true

x-aws-cloudformation:
  Resources:
    # Disable the default listeners and port 3000 ingress rule
    Smepublicprofileclient3000Listener:
    Sectoraverageservice3003Listener:
    Default3000Ingress:

    # Specify the subnets for the load balancer
    LoadBalancer:
      Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
      Properties:
        Subnets:
          - ${AWS_VPC_PUBLIC_SUBNET_0}
          - ${AWS_VPC_PUBLIC_SUBNET_1}
          - ${AWS_VPC_PUBLIC_SUBNET_2}

    # Update the CloudFormation resource dependencies; the services should
    # all depend on the shared application load balancer defined below.
    SectoraverageserviceService:
      Type: "AWS::ECS::Service"
      DependsOn:
        - SmePublicProfileListener443
      Properties:
        NetworkConfiguration:
          AwsvpcConfiguration:
            Subnets:
              - ${AWS_VPC_PUBLIC_SUBNET_0}
              - ${AWS_VPC_PUBLIC_SUBNET_1}
              - ${AWS_VPC_PUBLIC_SUBNET_2}

    SmepublicprofileclientService:
      Type: "AWS::ECS::Service"
      DependsOn:
        - SmePublicProfileListener443
      Properties:
        NetworkConfiguration:
          AwsvpcConfiguration:
            Subnets:
              - ${AWS_VPC_PUBLIC_SUBNET_0}
              - ${AWS_VPC_PUBLIC_SUBNET_1}
              - ${AWS_VPC_PUBLIC_SUBNET_2}

    # Redirect HTTP to HTTPS
    # Doc: https://aws.amazon.com/premiumsupport/knowledge-center/elb-redirect-http-to-https-using-alb/
    SmePublicProfileListener80:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
        LoadBalancerArn:
          Ref: LoadBalancer
        DefaultActions:
          - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: 443
              StatusCode: HTTP_301
        Protocol: HTTP
        Port: 80

    # Define a custom application load balancer to serve HTTPS with path based
    # routing to individual backend services.
    SmePublicProfileListener443:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
        LoadBalancerArn:
          Ref: LoadBalancer
        # Default route to the web server.
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: Smepublicprofileclient3000TargetGroup
        Certificates:
          - CertificateArn: "${AWS_CERTIFICATE}"
        Protocol: HTTPS
        Port: 443

    # Route path /api/sector/* to the sector-average-service.
    RouteSectorApiRule:
      Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
      DependsOn:
        - SmePublicProfileListener443
      Properties:
        ListenerArn:
          Ref: SmePublicProfileListener443
        Priority: 1
        Conditions:
          - Field: path-pattern
            Values:
              - "/api/sector/*"
        Actions:
          - Type: forward
            TargetGroupArn:
              Ref: Sectoraverageservice3003TargetGroup

x-aws-vpc: "${AWS_VPC}"
